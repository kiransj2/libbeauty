import sys
import os

# You need to define LLVM_BASE in your environment
# You need to define LIBBEAUTY_BASE in your environment
llvm_base = os.environ['LLVM_BASE']
libbeauty_base = os.environ['LIBBEAUTY_BASE']

config.host_triple = "x86_64-unknown-linux-gnu"
config.target_triple = "x86_64-unknown-linux-gnu"
config.llvm_src_root = llvm_base
config.llvm_obj_root = llvm_base
config.llvm_tools_dir = llvm_base + "/bin"
config.libbeauty_tools_dir = libbeauty_base + "/test"
config.llvm_shlib_dir = llvm_base + "/lib"
config.llvm_shlib_ext = ".so"
config.llvm_exe_ext = ""
config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
config.python_executable = "/usr/bin/python"
config.ocamlopt_executable = " -cc \"\" -cclib -L " + config.llvm_shlib_dir + "-I " + config.llvm_shlib_dir + "ocaml"
config.enable_shared = 1
config.enable_assertions = 1
config.targets_to_build = "X86 Sparc PowerPC AArch64 ARM ARM64 Mips XCore MSP430 CppBackend NVPTX Hexagon SystemZ R600"
config.llvm_bindings = ""
config.host_os = "Linux"
config.host_arch = "x86_64"
config.llvm_use_intel_jitevents = "@LLVM_USE_INTEL_JITEVENTS@"
config.llvm_use_sanitizer = "@LLVM_USE_SANITIZER@"
config.have_zlib = "1"

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

# Let the main config do the real work.
lit_config.load_config(config, libbeauty_base + "/test/tests/lit.cfg")
