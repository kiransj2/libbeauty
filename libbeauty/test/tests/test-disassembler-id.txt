# RUN: ./test_id input.txt | ./FileCheck input.txt

# TEST CASE 0x1
# addl    %edi, %eax
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=41:// 0x0000:ADDf r0x8/32, r0x40/32, r0x8/32
# CHECK: inst_size = 1
0x01 0xf8

# TEST CASE 0x2
# addb    $2, %al
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=37:// 0x0000:ADDf r0x8/8, i0x2/8, r0x8/8
# CHECK: inst_size = 1
0x04 0x02

# TEST CASE 0x3
# leal    291(%rdi), %eax
# CHECK: getInstruction Size = 0x6
# CHECK: result: len=45:// 0x0000:ADD  r0x40/64, i0x123/64, r0x160/64
# CHECK: result: len=33:// 0x0001:MOV  r0x160/64, r0x8/32
# CHECK: inst_size = 2
0x8d 0x87 0x23 0x01 0 0

# TEST CASE 0x4
# movzbl  -96(%rbp), %esi
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=44:// 0x0000:SUB  r0x30/64, i0x60/64, r0x160/64
# CHECK: result: len=48:// 0x0001:LOAD  s[r0x160]/8, r0x160/64, r0x180/8
# CHECK: result: len=33:// 0x0002:MOV  r0x180/8, r0x38/32
# CHECK: inst_size = 3
0x0f 0xb6 0x75 0xa0 0x00 0x00

# TEST CASE 0x5
# movzbl  1061(%rbx), %edx
# CHECK: getInstruction Size = 0x7
# CHECK: result: len=45:// 0x0000:ADD  r0x20/64, i0x425/64, r0x160/64
# CHECK: result: len=48:// 0x0001:LOAD  m[r0x160]/8, r0x160/64, r0x180/8
# CHECK: result: len=33:// 0x0002:MOV  r0x180/8, r0x18/32
# CHECK: inst_size = 3
0x0f 0xb6 0x93 0x25 0x04 0x00 0x00

# TEST CASE 0x6
# movq    $0, %rdx
# CHECK: getInstruction Size = 0x7
# CHECK: result: len=32:// 0x0000:MOV  i0x0/64, r0x18/64
# CHECK: inst_size = 1
0x48 0xc7 0xc2 0x00 0x00 0x00 0x00

# TEST CASE 0x7
# movl    $4294967201, -104(%rbp)
# CHECK: getInstruction Size = 0x7
# CHECK: result: len=44:// 0x0000:SUB  r0x30/64, i0x68/64, r0x160/64
# CHECK: result: len=40:// 0x0001:MOV  i0xffffffa1/32, r0x180/32
# CHECK: result: len=51:// 0x0002:STORE  r0x180/32, r0x160/64, s[r0x160]/32
# CHECK: inst_size = 3
0xc7 0x45 0x98 0xa1 0xff 0xff 0xff

# TEST CASE 0x8
# movb    $12, 1046(%r12)
# CHECK: getInstruction Size = 0x9
# CHECK: result: len=45:// 0x0000:ADD  r0x70/64, i0x416/64, r0x160/64
# CHECK: result: len=31:// 0x0001:MOV  i0xc/8, r0x180/8
# CHECK: result: len=49:// 0x0002:STORE  r0x180/8, r0x160/64, m[r0x160]/8
# CHECK: inst_size = 3
0x41 0xc6 0x84 0x24 0x16 0x04 0x00 0x00 0x0c

# TEST CASE 0x9
# push   %rbp
# CHECK: getInstruction Size = 0x1
# CHECK: result: len=42:// 0x0000:SUB  r0x28/64, i0x8/64, r0x28/64
# CHECK: result: len=48:// 0x0001:STORE  r0x30/64, r0x28/64, s[r0x28]/64
# CHECK: inst_size = 2
0x55

# TEST CASE 0xa
# sarl $2, %esi
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=41:// 0x0000:SARf r0x38/32, i0x2/8, r0x38/32
# CHECK: inst_size = 1
0xc1 0xfe 0x02

# TEST CASE 0xb
# movslq %esi,%rsi
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=33:// 0x0000:SEX  r0x38/32, r0x38/64
# CHECK: inst_size = 1
0x48 0x63 0xf6

# TEST CASE 0xc
# shlq    $0x2,%rsi
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=41:// 0x0000:SHLf r0x38/64, i0x2/8, r0x38/64
# CHECK: inst_size = 1
0x48 0xc1 0xe6 0x02

# TEST CASE 0xd
# movq    %rsp,%rbp
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=33:// 0x0000:MOV  r0x28/64, r0x30/64
# CHECK: inst_size = 1
0x48 0x89 0xe5

# TEST CASE 0xe
# addq   0x60(%rdi),%rsi
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=44:// 0x0000:ADD  r0x40/64, i0x60/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  m[r0x160]/64, r0x160/64, r0x180/64
# CHECK: result: len=44:// 0x0002:ADDf r0x38/64, r0x180/64, r0x38/64
# CHECK: inst_size = 3
0x48 0x03 0x77 0x60

# TEST CASE 0xf
# mov    (%rsi),%eax
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=43:// 0x0000:ADD  r0x38/64, i0x0/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  m[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=33:// 0x0002:MOV  r0x180/32, r0x8/32
# CHECK: inst_size = 3
0x8b 0x06

# TEST CASE 0x10
# leaveq
# CHECK: getInstruction Size = 0x1
# CHECK: result: len=33:// 0x0000:MOV  r0x30/64, r0x28/64
# CHECK: result: len=47:// 0x0001:LOAD  s[r0x28]/64, r0x28/64, r0x30/64
# CHECK: result: len=42:// 0x0002:ADD  r0x28/64, i0x8/64, r0x28/64
# CHECK: inst_size = 3
0xc9

# TEST CASE 0x11
# retq
# CHECK: getInstruction Size = 0x1
# CHECK: result: len=48:// 0x0000:LOAD  s[r0x28]/64, r0x28/64, r0x160/64
# CHECK: result: len=42:// 0x0001:ADD  r0x28/64, i0x8/64, r0x28/64
# CHECK: result: len=14:// 0x0002:NOP 
# CHECK: result: len=34:// 0x0003:MOV  r0x160/64, r0x48/64
# CHECK: inst_size = 4
0xc3

# TEST CASE 0x12
# nopw   %cs:0x0(%rax,%rax,1)
# CHECK: getInstruction Size = 0xa
# CHECK: inst_size = 0
0x66 0x2e 0x0f 0x1f 0x84 0x00 0x00 0x00 0x00 0x00

# TEST CASE 0x13
# subl   $0x1,-0x8(%rbp)
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=43:// 0x0000:SUB  r0x30/64, i0x8/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  s[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=44:// 0x0002:SUBf r0x180/32, i0x1/32, r0x180/32
# CHECK: result: len=51:// 0x0003:STORE  r0x180/32, r0x160/64, s[r0x160]/32
# CHECK: inst_size = 4
0x83 0x6d 0xf8 0x01

# TEST CASE 0x14
# addl   $0x1,-0x4(%rbp)
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=43:// 0x0000:SUB  r0x30/64, i0x4/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  s[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=44:// 0x0002:ADDf r0x180/32, i0x1/32, r0x180/32
# CHECK: result: len=51:// 0x0003:STORE  r0x180/32, r0x160/64, s[r0x160]/32
# CHECK: inst_size = 4
0x83 0x45 0xfc 0x01

# TEST CASE 0x15
# movl    $0x123,%eax
# CHECK: getInstruction Size = 0x5
# CHECK: result: len=33:// 0x0000:MOV  i0x123/32, r0x8/32
# CHECK: inst_size = 1
0xb8 0x23 0x01 0x00 0x00

# TEST CASE 0x16
# movslq -0x4(%rsp),%rax
# CHECK: getInstruction Size = 0x5
# CHECK: result: len=43:// 0x0000:SUB  r0x28/64, i0x4/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  s[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=33:// 0x0002:SEX  r0x180/32, r0x8/64
# CHECK: inst_size = 3
0x48 0x63 0x44 0x24 0xfc

# TEST CASE 0x17
# jmpq   *%rax
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=33:// 0x0000:JMPT  r0x8/64, r0x48/64
# CHECK: inst_size = 1
0xff 0xe0

# TEST CASE 0x18
# mov    0x0700(,%rax,8),%rax
# CHECK: getInstruction Size = 0x8
# CHECK: result: len=43:// 0x0000:IMUL  r0x8/64, i0x8/64, r0x160/64
# CHECK: result: len=46:// 0x0001:ADD  r0x160/64, i0x700/64, r0x160/64
# CHECK: result: len=50:// 0x0002:LOAD  m[r0x160]/64, r0x160/64, r0x180/64
# CHECK: result: len=33:// 0x0003:MOV  r0x180/64, r0x8/64
# CHECK: inst_size = 4
0x48 0x8b 0x04 0xc5 0x00 0x07 0x00 0x00

# TEST CASE 0x19
# imul   $0x7,-0x8(%rsp),%rdi
# CHECK: getInstruction Size = 0x9
# CHECK: result: len=43:// 0x0000:SUB  r0x28/64, i0x8/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  s[r0x160]/64, r0x160/64, r0x180/64
# CHECK: result: len=44:// 0x0002:IMULf i0x7/64, r0x180/64, r0x40/64
# CHECK: inst_size = 3
0x48 0x69 0x7c 0x24 0xf8 0x07 0x00 0x00 0x00

# TEST CASE 0x19
# imul   $0x7,%rdi,%rax
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=42:// 0x0000:IMULf i0x7/64, r0x40/64, r0x8/64
# CHECK: inst_size = 1
0x48 0x6b 0xc7 0x07

# TEST CASE 0x1a
# dec    %edi
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=42:// 0x0000:SUBf r0x40/32, i0x1/32, r0x40/32
# CHECK: inst_size = 1
0xff 0xcf

# TEST CASE 0x1b
# mov    %eax,-0x4(%rbp)
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=43:// 0x0000:SUB  r0x30/64, i0x4/64, r0x160/64
# CHECK: result: len=33:// 0x0001:MOV  r0x8/32, r0x180/32
# CHECK: result: len=51:// 0x0002:STORE  r0x180/32, r0x160/64, s[r0x160]/32
# CHECK: inst_size = 3
0x89 0x45 0xfc

# TEST CASE 0x1c
# mov    -0x4(%rbp),%eax
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=43:// 0x0000:SUB  r0x30/64, i0x4/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  s[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=33:// 0x0002:MOV  r0x180/32, r0x8/32
# CHECK: inst_size = 3
0x8b 0x45 0xfc

# TEST CASE 0x1d
# add    %eax,-0x4(%rbp)
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=43:// 0x0000:SUB  r0x30/64, i0x4/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  s[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=44:// 0x0002:ADDf r0x180/32, r0x8/32, r0x180/32
# CHECK: result: len=51:// 0x0003:STORE  r0x180/32, r0x160/64, s[r0x160]/32
# CHECK: inst_size = 4
0x01 0x45 0xfc


# TEST CASE 0x1e
# movl   $0x1,(%rax)
# CHECK: getInstruction Size = 0x6
# CHECK: result: len=42:// 0x0000:ADD  r0x8/64, i0x0/64, r0x160/64
# CHECK: result: len=33:// 0x0001:MOV  i0x1/32, r0x180/32
# CHECK: result: len=51:// 0x0002:STORE  r0x180/32, r0x160/64, m[r0x160]/32
# CHECK: inst_size = 3
0xc7 0x00 0x01 0x00 0x00 0x00

# TEST CASE 0x1f
# callq  *0x8(%rbx)
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=43:// 0x0000:ADD  r0x20/64, i0x8/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  m[r0x160]/64, r0x160/64, r0x180/64
# CHECK: result: len=31:// 0x0002:CALL  (r0x180/64) ();
# CHECK: inst_size = 3
0xff 0x53 0x08

# TEST CASE 0x20
# callq  *%rax
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=29:// 0x0000:CALL  (r0x8/64) ();
# CHECK: inst_size = 1
0xff 0xd0

# TEST CASE 0x21
# cmovne %edx,%eax
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=33:// 0x0000:IF   cond=6 JMP-REL=0x0
# CHECK: result: len=32:// 0x0001:MOV  r0x18/32, r0x8/32
# CHECK: inst_size = 2
0x0f 0x45 0xc2

# TEST CASE 0x22
# setne  -0x5b(%rbp)
# CHECK: getInstruction Size = 0x4
# CHECK: result: len=33:// 0x0000:IF   cond=6 JMP-REL=0x0
# CHECK: result: len=44:// 0x0001:SUB  r0x30/64, i0x5b/64, r0x160/64
# CHECK: result: len=31:// 0x0002:MOV  i0x1/8, r0x180/8
# CHECK: result: len=49:// 0x0003:STORE  r0x180/8, r0x160/64, s[r0x160]/8
# CHECK: result: len=33:// 0x0004:IF   cond=5 JMP-REL=0x0
# CHECK: result: len=44:// 0x0005:SUB  r0x30/64, i0x5b/64, r0x160/64
# CHECK: result: len=31:// 0x0006:MOV  i0x0/8, r0x180/8
# CHECK: result: len=49:// 0x0007:STORE  r0x180/8, r0x160/64, s[r0x160]/8
# CHECK: inst_size = 8
0x0f 0x95 0x45 0xa5

# TEST CASE 0x23
# jmpq   *0x0(,%rax,8)
# CHECK: getInstruction Size = 0x7
# CHECK: result: len=42:// 0x0000:IMUL  r0x8/64, i0x8/0, r0x160/64
# CHECK: result: len=44:// 0x0001:ADD  r0x160/64, i0x0/64, r0x160/64
# CHECK: result: len=50:// 0x0002:LOAD  m[r0x160]/64, r0x160/64, r0x180/64
# CHECK: result: len=35:// 0x0003:JMPT  r0x180/64, r0x48/64
# CHECK: inst_size = 4
0xff 0x24 0xc5 0x00 0x00 0x00 0x00

# TEST CASE 0x24
# cltq CDQE
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=31:// 0x0000:SEX  r0x8/32, r0x8/64
# CHECK: inst_size = 1
0x48 0x98

# TEST CASE 0x25
# jmpq
# CHECK: getInstruction Size = 0x5
# CHECK: result: len=47:// 0x0000:JMP  i0xfffffffffffffc98/64, r0x48/64
# CHECK: inst_size = 1
0xe9 0x98 0xfc 0xff 0xff

# TEST CASE 0x26
# rep movsq %ds:(%rsi),%es:(%rdi)
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=32:// 0x0000:CMPf r0x10/64, i0x0/64
# CHECK: result: len=33:// 0x0001:IF   cond=4 JMP-REL=0x0
# CHECK: result: len=42:// 0x0002:SUB  i0x1/64, r0x10/64, r0x10/64
# CHECK: result: len=48:// 0x0003:LOAD  m[r0x38]/64, r0x38/64, r0x180/64
# CHECK: result: len=49:// 0x0004:STORE  r0x180/64, r0x40/64, m[r0x40]/64
# CHECK: result: len=42:// 0x0005:ADD  i0x8/64, r0x38/64, r0x38/64
# CHECK: result: len=42:// 0x0006:ADD  i0x8/64, r0x40/64, r0x40/64
# CHECK: result: len=47:// 0x0007:JMP  i0xfffffffffffffffd/64, r0x48/64
# CHECK: inst_size = 8
0xf3 0x48 0xa5

# TEST CASE 0x27
# test   %eax,%eax
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=32:// 0x0000:TESTf r0x8/32, r0x8/32
# CHECK: inst_size = 1
0x85 0xc0

# TEST CASE 0x28
# movss  -0x4(%rbp),%xmm0
# CHECK: getInstruction Size = 0x5
# CHECK: result: len=43:// 0x0000:SUB  r0x30/64, i0x4/64, r0x160/64
# CHECK: result: len=52:// 0x0001:LOAD  s[r0x160]/128, r0x160/64, r0x180/128
# CHECK: result: len=37:// 0x0002:MOV  r0x180/128, r0x100/128
# CHECK: inst_size = 3
0xf3 0x0f 0x10 0x45 0xfc

# TEST CASE 0x29
# shl    %cl,%edx
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=42:// 0x0000:SHLf r0x18/32, r0x10/8, r0x18/32
# CHECK: inst_size = 1
0xd3 0xe2

# TEST CASE 0x2a
# mov    %r13d,%ecx
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=33:// 0x0000:MOV  r0x78/32, r0x10/32
# CHECK: inst_size = 1
0x44 0x89 0xe9

# TEST CASE 0x2b
# cmp    $0x1,%esi
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=32:// 0x0000:CMPf r0x38/32, i0x1/32
# CHECK: inst_size = 1
0x83 0xfe 0x01

# TEST CASE 0x2c
# CHECK: getInstruction Size = 0x9
# CHECK: result: len=45:// 0x0000:ADD  r0x70/64, i0x3c8/64, r0x160/64
# CHECK: result: len=50:// 0x0001:LOAD  m[r0x160]/32, r0x160/64, r0x180/32
# CHECK: result: len=33:// 0x0002:CMPf r0x180/32, i0x1/32
# CHECK: inst_size = 3
# cmpl   $0x1,0x3c8(%r12)
0x41 0x83 0xbc 0x24 0xc8 0x03 0x00 0x00 0x01

# TEST CASE 0x2d
# movsbl %al,%eax
# CHECK: getInstruction Size = 0x3
# CHECK: result: len=30:// 0x0000:SEX  r0x8/8, r0x8/32
# CHECK: inst_size = 1
0x0f 0xbe 0xc0

# TEST CASE 0x2e
# callq
# CHECK: getInstruction Size = 0x5
# CHECK: result: len=44:// 0x0000:CALL CALL FAILED index=0x12345678
# CHECK: inst_size = 1
0xe8 0x78 0x56 0x34 0x12

# TEST CASE 0x2f
# jle    7 <test47+0x7>
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=49:// 0x0000:IF   cond=15 JMP-REL=0xffffffffffffffe5
# CHECK: inst_size = 1
0x7e 0xe5

# TEST CASE 0x30
# cmp    %ecx,%eax
# CHECK: getInstruction Size = 0x2
# CHECK: result: len=32:// 0x0000:CMPf r0x8/32, r0x10/32
# CHECK: inst_size = 1
0x39 0xc8
