Compilation and Installation instructions
-----------------------------------------
Authors: Arun Prakash Jana (engineerarun@gmail.com)
         James Courtier-Dutton
Platform: Tested on Ubuntu 13.04
Compiler: gcc or clang

Prerequisites:
-------------
autoconf
libtool
llvm-dev
libclang-dev
llvm Git development branch source code - http://llvm.org/git/llvm.git

Steps to install libbeauty:
--------------------------

1. Check-out llvm source from Git
 $ git clone http://llvm.org/git/llvm.git

2. cd to the llvm directory.

3. Compile the llvm library as a shared library. Don't use ./configure, use cmake. Only cmake creates the correct shared libraries.
 $ cmake -DBUILD_SHARED_LIBS:BOOL=ON /path/to/llvm
 $ make

4. Install methods:
a) make install

5. Download the libbeauty source:
Methods:
a) git clone https://github.com/jcdutton/libbeauty.git
   $ cd libbeauty/libbeauty
b) https://github.com/jcdutton/libbeauty/archive/master.zip
   Extract the package and cd to the libbeauty source directory
   $ unzip libbeauty-master.zip
   $ cd libbeauty-master/libbeauty

6. Set CC, CXX, CPP, CXXCPP environment variables if you wish to use clang/llvm to compile libbeauty:
export CC=/usr/bin/clang
export CPP=/usr/bin/clang++
export CXXCPP="/usr/bin/clang++ -E"
export CPP="/usr/bin/clang -E"

Otherwise gcc is the default.

Then run once:
 $ autogen.sh
After that, you only need to run:
 $ ./configure

7. To compile, run
   $ make
8. To install, run
   $ make install

After a clean compilation and install, the libraries should be located at:
   /usr/local/lib/beauty/

9. Testing.
   $ cd test

First run "./test_case tests/ tests/test-disassembler-callback.txt".
This should output:
NumOperands = 0x0, Offset = 0x3, Size = 0x1

If it does not, libbeauty will not work.
To fix the test, you need to apply the "fix-wrong-displacementSize.diff"
to the llvm source (not the libbeauty source) and compile and install llvm again.
The test "./test_case" should now pass.

Next run "./test_id tests/id01.txt"
It should report:
getInstruction Size = 0x2
result: len=41:// 0x0000:ADDf r0x8/32, r0x40/32, r0x8/32
inst_size = 1

You can now try out libbeauty.
e.g.
./dis64 test0.o

dis64 is in the ./test directory.
The test0.o is in the ./src/test directory, along with many other tests, along with associated C code.
The will create .dot files in the ./test/cfg directory that look a bit like C code with comments.

dis64 is a currently a work in progress demonstration of the libbeauty library. It takes a .o file, and uses libbeauty to process it.

LLVM IR files will also be created. LLVM IR output is still work in progress, the the output might not always work.

